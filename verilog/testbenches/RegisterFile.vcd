$date
	Sat Nov 11 02:01:19 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module RegisterFile_tb $end
$var wire 32 ! sr2 [31:0] $end
$var wire 32 " sr1 [31:0] $end
$var reg 1 # clk $end
$var reg 32 $ data_in [31:0] $end
$var reg 4 % dr_ind [3:0] $end
$var reg 1 & en_write $end
$var reg 1 ' reset $end
$var reg 4 ( sr1_ind [3:0] $end
$var reg 4 ) sr2_ind [3:0] $end
$scope module reg_file $end
$var wire 1 # clk $end
$var wire 32 * data_in [31:0] $end
$var wire 4 + dr_ind [3:0] $end
$var wire 1 & en_write $end
$var wire 1 ' reset $end
$var wire 32 , sr1 [31:0] $end
$var wire 4 - sr1_ind [3:0] $end
$var wire 32 . sr2 [31:0] $end
$var wire 4 / sr2_ind [3:0] $end
$scope begin genblk1[0] $end
$var wire 1 0 en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 1 data_in [31:0] $end
$var wire 1 0 en_write $end
$var wire 1 ' reset $end
$var reg 32 2 data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 1 3 en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 4 data_in [31:0] $end
$var wire 1 3 en_write $end
$var wire 1 ' reset $end
$var reg 32 5 data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 1 6 en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 7 data_in [31:0] $end
$var wire 1 6 en_write $end
$var wire 1 ' reset $end
$var reg 32 8 data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var wire 1 9 en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 : data_in [31:0] $end
$var wire 1 9 en_write $end
$var wire 1 ' reset $end
$var reg 32 ; data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var wire 1 < en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 = data_in [31:0] $end
$var wire 1 < en_write $end
$var wire 1 ' reset $end
$var reg 32 > data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var wire 1 ? en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 @ data_in [31:0] $end
$var wire 1 ? en_write $end
$var wire 1 ' reset $end
$var reg 32 A data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var wire 1 B en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 C data_in [31:0] $end
$var wire 1 B en_write $end
$var wire 1 ' reset $end
$var reg 32 D data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var wire 1 E en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 F data_in [31:0] $end
$var wire 1 E en_write $end
$var wire 1 ' reset $end
$var reg 32 G data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$var wire 1 H en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 I data_in [31:0] $end
$var wire 1 H en_write $end
$var wire 1 ' reset $end
$var reg 32 J data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$var wire 1 K en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 L data_in [31:0] $end
$var wire 1 K en_write $end
$var wire 1 ' reset $end
$var reg 32 M data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$var wire 1 N en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 O data_in [31:0] $end
$var wire 1 N en_write $end
$var wire 1 ' reset $end
$var reg 32 P data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$var wire 1 Q en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 R data_in [31:0] $end
$var wire 1 Q en_write $end
$var wire 1 ' reset $end
$var reg 32 S data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$var wire 1 T en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 U data_in [31:0] $end
$var wire 1 T en_write $end
$var wire 1 ' reset $end
$var reg 32 V data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$var wire 1 W en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 X data_in [31:0] $end
$var wire 1 W en_write $end
$var wire 1 ' reset $end
$var reg 32 Y data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$var wire 1 Z en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 [ data_in [31:0] $end
$var wire 1 Z en_write $end
$var wire 1 ' reset $end
$var reg 32 \ data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$var wire 1 ] en_write1 $end
$scope module regs $end
$var wire 1 # clk $end
$var wire 32 ^ data_in [31:0] $end
$var wire 1 ] en_write $end
$var wire 1 ' reset $end
$var reg 32 _ data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx _
bx ^
x]
bx \
bx [
xZ
bx Y
bx X
xW
bx V
bx U
xT
bx S
bx R
xQ
bx P
bx O
xN
bx M
bx L
xK
bx J
bx I
xH
bx G
bx F
xE
bx D
bx C
xB
bx A
bx @
x?
bx >
bx =
x<
bx ;
bx :
x9
bx 8
bx 7
x6
bx 5
bx 4
x3
bx 2
bx 1
x0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
0'
x&
bx %
bx $
0#
bx "
bx !
$end
#2000
1'
1#
#4000
0#
#6000
0'
b0 _
b0 \
b0 Y
b0 V
b0 S
b0 P
b0 M
b0 J
b0 G
b0 D
b0 A
b0 >
b0 ;
b0 8
b0 5
b0 2
1#
#8000
0#
#10000
03
06
09
0<
0?
0B
0E
0H
0K
0N
0Q
0T
0W
0Z
0]
b0 %
b0 +
b0 $
b0 *
b0 1
b0 4
b0 7
b0 :
b0 =
b0 @
b0 C
b0 F
b0 I
b0 L
b0 O
b0 R
b0 U
b0 X
b0 [
b0 ^
b0 !
b0 .
b0 )
b0 /
b0 "
b0 ,
b0 (
b0 -
1#
#12000
0#
#14000
b10 )
b10 /
b1 (
b1 -
1#
#16000
0#
#18000
00
13
b1001 $
b1001 *
b1001 1
b1001 4
b1001 7
b1001 :
b1001 =
b1001 @
b1001 C
b1001 F
b1001 I
b1001 L
b1001 O
b1001 R
b1001 U
b1001 X
b1001 [
b1001 ^
1&
b1 %
b1 +
1#
#20000
0#
#22000
03
0&
b1001 5
b1001 "
b1001 ,
1#
#24000
0#
#26000
b1010 $
b1010 *
b1010 1
b1010 4
b1010 7
b1010 :
b1010 =
b1010 @
b1010 C
b1010 F
b1010 I
b1010 L
b1010 O
b1010 R
b1010 U
b1010 X
b1010 [
b1010 ^
1#
#28000
0#
#30000
13
b111 $
b111 *
b111 1
b111 4
b111 7
b111 :
b111 =
b111 @
b111 C
b111 F
b111 I
b111 L
b111 O
b111 R
b111 U
b111 X
b111 [
b111 ^
1&
1#
#32000
0#
#34000
b111 5
b111 "
b111 ,
b1000 $
b1000 *
b1000 1
b1000 4
b1000 7
b1000 :
b1000 =
b1000 @
b1000 C
b1000 F
b1000 I
b1000 L
b1000 O
b1000 R
b1000 U
b1000 X
b1000 [
b1000 ^
1#
#36000
0#
#38000
03
0&
b1000 5
b1000 "
b1000 ,
1#
#40000
0#
#42000
1#
