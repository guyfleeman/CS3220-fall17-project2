$date
	Sun Nov 12 01:47:37 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Processor_tb $end
$var wire 32 ! instr_word [31:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module processor $end
$var wire 1 " clk $end
$var wire 32 $ inst_word_out [31:0] $end
$var wire 1 % pc_en $end
$var wire 1 # reset $end
$var wire 1 & wr_reg $end
$var wire 1 ' wr_mem $end
$var wire 4 ( src_reg2 [3:0] $end
$var wire 4 ) src_reg1 [3:0] $end
$var wire 2 * sel_reg_din [1:0] $end
$var wire 2 + sel_pc [1:0] $end
$var wire 2 , sel_alu_sr2 [1:0] $end
$var wire 32 - regs_out2 [31:0] $end
$var wire 32 . regs_out1 [31:0] $end
$var wire 32 / pc_out [31:0] $end
$var wire 32 0 inst_word [31:0] $end
$var wire 32 1 imm_ext4 [31:0] $end
$var wire 32 2 imm_ext [31:0] $end
$var wire 16 3 imm [15:0] $end
$var wire 4 4 dest_reg [3:0] $end
$var wire 32 5 data_out [31:0] $end
$var wire 32 6 alu_out [31:0] $end
$var wire 5 7 alu_fn [4:0] $end
$var reg 32 8 alu_in2 [31:0] $end
$var reg 32 9 pc_in [31:0] $end
$var reg 32 : regs_din [31:0] $end
$scope module alu $end
$var wire 32 ; in2 [31:0] $end
$var wire 32 < in1 [31:0] $end
$var wire 5 = alu_fn [4:0] $end
$var reg 32 > out [31:0] $end
$upscope $end
$scope module data_memory $end
$var wire 11 ? addr [10:0] $end
$var wire 1 " clk $end
$var wire 32 @ data_out [31:0] $end
$var wire 1 # reset $end
$var wire 1 ' en_write $end
$var wire 32 A data_in [31:0] $end
$upscope $end
$scope module decoder $end
$var wire 32 B alu_out [31:0] $end
$var wire 4 C opcode [3:0] $end
$var wire 4 D fn [3:0] $end
$var wire 32 E data [31:0] $end
$var reg 5 F alu_fn [4:0] $end
$var reg 4 G dest_reg [3:0] $end
$var reg 16 H imm [15:0] $end
$var reg 2 I sel_alu_sr2 [1:0] $end
$var reg 2 J sel_pc [1:0] $end
$var reg 2 K sel_reg_din [1:0] $end
$var reg 4 L src_reg1 [3:0] $end
$var reg 4 M src_reg2 [3:0] $end
$var reg 1 ' wr_mem $end
$var reg 1 & wr_reg $end
$upscope $end
$scope module instMem $end
$var wire 11 N addr [10:0] $end
$var wire 32 O dataOut [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 " clk $end
$var wire 32 P data_in [31:0] $end
$var wire 1 % en_write $end
$var wire 1 # reset $end
$var reg 32 Q data_out [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 R data_in [31:0] $end
$var wire 4 S dr_ind [3:0] $end
$var wire 1 & en_write $end
$var wire 1 # reset $end
$var wire 32 T sr1 [31:0] $end
$var wire 4 U sr1_ind [3:0] $end
$var wire 32 V sr2 [31:0] $end
$var wire 4 W sr2_ind [3:0] $end
$scope begin genblk1[0] $end
$var wire 1 X en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 Y data_in [31:0] $end
$var wire 1 X en_write $end
$var wire 1 # reset $end
$var reg 32 Z data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var wire 1 [ en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 \ data_in [31:0] $end
$var wire 1 [ en_write $end
$var wire 1 # reset $end
$var reg 32 ] data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var wire 1 ^ en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 _ data_in [31:0] $end
$var wire 1 ^ en_write $end
$var wire 1 # reset $end
$var reg 32 ` data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var wire 1 a en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 b data_in [31:0] $end
$var wire 1 a en_write $end
$var wire 1 # reset $end
$var reg 32 c data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var wire 1 d en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 e data_in [31:0] $end
$var wire 1 d en_write $end
$var wire 1 # reset $end
$var reg 32 f data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var wire 1 g en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 h data_in [31:0] $end
$var wire 1 g en_write $end
$var wire 1 # reset $end
$var reg 32 i data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var wire 1 j en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 k data_in [31:0] $end
$var wire 1 j en_write $end
$var wire 1 # reset $end
$var reg 32 l data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var wire 1 m en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 n data_in [31:0] $end
$var wire 1 m en_write $end
$var wire 1 # reset $end
$var reg 32 o data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$var wire 1 p en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 q data_in [31:0] $end
$var wire 1 p en_write $end
$var wire 1 # reset $end
$var reg 32 r data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$var wire 1 s en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 t data_in [31:0] $end
$var wire 1 s en_write $end
$var wire 1 # reset $end
$var reg 32 u data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$var wire 1 v en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 w data_in [31:0] $end
$var wire 1 v en_write $end
$var wire 1 # reset $end
$var reg 32 x data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$var wire 1 y en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 z data_in [31:0] $end
$var wire 1 y en_write $end
$var wire 1 # reset $end
$var reg 32 { data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$var wire 1 | en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 } data_in [31:0] $end
$var wire 1 | en_write $end
$var wire 1 # reset $end
$var reg 32 ~ data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$var wire 1 !" en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 "" data_in [31:0] $end
$var wire 1 !" en_write $end
$var wire 1 # reset $end
$var reg 32 #" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$var wire 1 $" en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 %" data_in [31:0] $end
$var wire 1 $" en_write $end
$var wire 1 # reset $end
$var reg 32 &" data_out [31:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$var wire 1 '" en_write1 $end
$scope module regs $end
$var wire 1 " clk $end
$var wire 32 (" data_in [31:0] $end
$var wire 1 '" en_write $end
$var wire 1 # reset $end
$var reg 32 )" data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module sign_extend $end
$var wire 16 *" dIn [15:0] $end
$var wire 32 +" dOut [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx +"
bx *"
bx )"
bz ("
0'"
bx &"
bz %"
0$"
bx #"
bz ""
0!"
bx ~
bz }
0|
bx {
bz z
0y
bx x
bz w
0v
bx u
bz t
0s
bx r
bz q
0p
bx o
bz n
0m
bx l
bz k
0j
bx i
bz h
0g
bx f
bz e
0d
bx c
bz b
0a
bx `
bz _
0^
bx ]
bz \
0[
bx Z
bz Y
0X
bx W
bx V
bx U
bx T
bx S
bz R
bx Q
bx P
bx O
bx N
bx M
bx L
bz K
b11 J
bz I
bx H
bx G
b0zzzz F
bx E
bx D
bx C
b0 B
bx A
bx @
b0 ?
b0 >
b0zzzz =
bx <
bz ;
bz :
bx 9
bz 8
b0zzzz 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx00 1
bx 0
bx /
bx .
bx -
bz ,
b11 +
bz *
bx )
bx (
0'
0&
1%
bx $
0#
0"
bx !
$end
#10000
1#
1"
#20000
0"
#30000
b10 ?
b1010 :
b1010 R
b1010 Y
b1010 \
b1010 _
b1010 b
b1010 e
b1010 h
b1010 k
b1010 n
b1010 q
b1010 t
b1010 w
b1010 z
b1010 }
b1010 ""
b1010 %"
b1010 ("
1[
b1010 6
b1010 >
b1010 B
b1010 8
b1010 ;
b10 *
b10 K
1&
b10 +
b10 J
b1 ,
b1 I
b11 7
b11 =
b11 F
b101000 1
b1011 C
b11 D
b1010 2
b1010 +"
b1010 3
b1010 H
b1010 *"
b1 4
b1 G
b1 S
b0 -
b0 A
b0 V
b1010 (
b1010 M
b1010 W
b0 .
b0 <
b0 T
b1 )
b1 L
b1 U
b111011000000000000101000010001 !
b111011000000000000101000010001 $
b111011000000000000101000010001 0
b111011000000000000101000010001 E
b111011000000000000101000010001 O
b10000 N
b1000100 9
b1000100 P
0#
b0 )"
b0 &"
b0 #"
b0 ~
b0 {
b0 x
b0 u
b0 r
b0 o
b0 l
b0 i
b0 f
b0 c
b0 `
b0 ]
b0 Z
b1000000 /
b1000000 Q
1"
#40000
0"
#50000
b1000 1
1X
b10 8
b10 ;
0[
b10 2
b10 +"
b10 3
b10 H
b10 *"
b0 4
b0 G
b0 S
b10 (
b10 M
b10 W
b0 )
b0 L
b0 U
b1 ,
b1 I
b10 *
b10 K
b10 +
b10 J
1&
b11 7
b11 =
b11 F
b0 ?
b111011000000000000001000000000 !
b111011000000000000001000000000 $
b111011000000000000001000000000 0
b111011000000000000001000000000 E
b111011000000000000001000000000 O
b10001 N
b1001000 9
b1001000 P
b10 :
b10 R
b10 Y
b10 \
b10 _
b10 b
b10 e
b10 h
b10 k
b10 n
b10 q
b10 t
b10 w
b10 z
b10 }
b10 ""
b10 %"
b10 ("
b10 6
b10 >
b10 B
b1000100 /
b1000100 Q
b1010 ]
b0 .
b0 <
b0 T
1"
#60000
0"
#70000
0X
b1010 -
b1010 A
b1010 V
b11111111111111111111111111111000 1
b1010 8
b1010 ;
b0 ?
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b0 C
b1101 D
b0 ,
b0 I
bz *
bz K
b0 +
b0 J
0&
b11101 7
b11101 =
b11101 F
b11111111111111111111111111111110 2
b11111111111111111111111111111110 +"
b1111111111111110 3
b1111111111111110 H
b1111111111111110 *"
b1 (
b1 M
b1 W
b0 )
b0 L
b0 U
b1 6
b1 >
b1 B
b11010000111111111111111000010000 !
b11010000111111111111111000010000 $
b11010000111111111111111000010000 0
b11010000111111111111111000010000 E
b11010000111111111111111000010000 O
b10010 N
b1000100 9
b1000100 P
b10 Z
b10 .
b10 <
b10 T
b1001000 /
b1001000 Q
1"
#80000
0"
#90000
b1 ?
1X
b100 :
b100 R
b100 Y
b100 \
b100 _
b100 b
b100 e
b100 h
b100 k
b100 n
b100 q
b100 t
b100 w
b100 z
b100 }
b100 ""
b100 %"
b100 ("
b10 *
b10 K
1&
b100 6
b100 >
b100 B
b1000 1
b10 8
b10 ;
b1011 C
b11 D
b1 ,
b1 I
b10 +
b10 J
b11 7
b11 =
b11 F
b10 2
b10 +"
b10 3
b10 H
b10 *"
b0 -
b0 A
b0 V
b10 (
b10 M
b10 W
b111011000000000000001000000000 !
b111011000000000000001000000000 $
b111011000000000000001000000000 0
b111011000000000000001000000000 E
b111011000000000000001000000000 O
b10001 N
b1001000 9
b1001000 P
b1000100 /
b1000100 Q
1"
#100000
0"
#110000
0X
b0 ?
b1010 -
b1010 A
b1010 V
b11111111111111111111111111111000 1
b1010 8
b1010 ;
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b0 C
b1101 D
b0 ,
b0 I
bz *
bz K
b0 +
b0 J
0&
b11101 7
b11101 =
b11101 F
b11111111111111111111111111111110 2
b11111111111111111111111111111110 +"
b1111111111111110 3
b1111111111111110 H
b1111111111111110 *"
b1 (
b1 M
b1 W
b0 )
b0 L
b0 U
b1 6
b1 >
b1 B
b11010000111111111111111000010000 !
b11010000111111111111111000010000 $
b11010000111111111111111000010000 0
b11010000111111111111111000010000 E
b11010000111111111111111000010000 O
b10010 N
b1000100 9
b1000100 P
b100 Z
b100 .
b100 <
b100 T
b1001000 /
b1001000 Q
1"
#120000
0"
#130000
b1 ?
1X
b110 :
b110 R
b110 Y
b110 \
b110 _
b110 b
b110 e
b110 h
b110 k
b110 n
b110 q
b110 t
b110 w
b110 z
b110 }
b110 ""
b110 %"
b110 ("
b10 *
b10 K
1&
b110 6
b110 >
b110 B
b1000 1
b10 8
b10 ;
b1011 C
b11 D
b1 ,
b1 I
b10 +
b10 J
b11 7
b11 =
b11 F
b10 2
b10 +"
b10 3
b10 H
b10 *"
b0 -
b0 A
b0 V
b10 (
b10 M
b10 W
b111011000000000000001000000000 !
b111011000000000000001000000000 $
b111011000000000000001000000000 0
b111011000000000000001000000000 E
b111011000000000000001000000000 O
b10001 N
b1001000 9
b1001000 P
b1000100 /
b1000100 Q
1"
#140000
0"
#150000
0X
b1010 -
b1010 A
b1010 V
b11111111111111111111111111111000 1
b1010 8
b1010 ;
b0 ?
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b0 C
b1101 D
b0 ,
b0 I
bz *
bz K
b0 +
b0 J
0&
b11101 7
b11101 =
b11101 F
b11111111111111111111111111111110 2
b11111111111111111111111111111110 +"
b1111111111111110 3
b1111111111111110 H
b1111111111111110 *"
b1 (
b1 M
b1 W
b0 )
b0 L
b0 U
b1 6
b1 >
b1 B
b11010000111111111111111000010000 !
b11010000111111111111111000010000 $
b11010000111111111111111000010000 0
b11010000111111111111111000010000 E
b11010000111111111111111000010000 O
b10010 N
b1000100 9
b1000100 P
b110 Z
b110 .
b110 <
b110 T
b1001000 /
b1001000 Q
1"
#160000
0"
#170000
b10 ?
1X
b1000 :
b1000 R
b1000 Y
b1000 \
b1000 _
b1000 b
b1000 e
b1000 h
b1000 k
b1000 n
b1000 q
b1000 t
b1000 w
b1000 z
b1000 }
b1000 ""
b1000 %"
b1000 ("
b10 *
b10 K
1&
b1000 6
b1000 >
b1000 B
b1000 1
b10 8
b10 ;
b1011 C
b11 D
b1 ,
b1 I
b10 +
b10 J
b11 7
b11 =
b11 F
b10 2
b10 +"
b10 3
b10 H
b10 *"
b0 -
b0 A
b0 V
b10 (
b10 M
b10 W
b111011000000000000001000000000 !
b111011000000000000001000000000 $
b111011000000000000001000000000 0
b111011000000000000001000000000 E
b111011000000000000001000000000 O
b10001 N
b1001000 9
b1001000 P
b1000100 /
b1000100 Q
1"
#180000
0"
#190000
0X
b0 ?
b1010 -
b1010 A
b1010 V
b11111111111111111111111111111000 1
b1010 8
b1010 ;
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b0 C
b1101 D
b0 ,
b0 I
bz *
bz K
b0 +
b0 J
0&
b11101 7
b11101 =
b11101 F
b11111111111111111111111111111110 2
b11111111111111111111111111111110 +"
b1111111111111110 3
b1111111111111110 H
b1111111111111110 *"
b1 (
b1 M
b1 W
b0 )
b0 L
b0 U
b1 6
b1 >
b1 B
b11010000111111111111111000010000 !
b11010000111111111111111000010000 $
b11010000111111111111111000010000 0
b11010000111111111111111000010000 E
b11010000111111111111111000010000 O
b10010 N
b1000100 9
b1000100 P
b1000 Z
b1000 .
b1000 <
b1000 T
b1001000 /
b1001000 Q
1"
#200000
0"
#210000
b10 ?
1X
b1010 :
b1010 R
b1010 Y
b1010 \
b1010 _
b1010 b
b1010 e
b1010 h
b1010 k
b1010 n
b1010 q
b1010 t
b1010 w
b1010 z
b1010 }
b1010 ""
b1010 %"
b1010 ("
b10 *
b10 K
1&
b1010 6
b1010 >
b1010 B
b1000 1
b10 8
b10 ;
b1011 C
b11 D
b1 ,
b1 I
b10 +
b10 J
b11 7
b11 =
b11 F
b10 2
b10 +"
b10 3
b10 H
b10 *"
b0 -
b0 A
b0 V
b10 (
b10 M
b10 W
b111011000000000000001000000000 !
b111011000000000000001000000000 $
b111011000000000000001000000000 0
b111011000000000000001000000000 E
b111011000000000000001000000000 O
b10001 N
b1001000 9
b1001000 P
b1000100 /
b1000100 Q
1"
#220000
0"
#230000
0X
b1010 -
b1010 A
b1010 V
b11111111111111111111111111111000 1
b1010 8
b1010 ;
b0 ?
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b0 C
b1101 D
b0 ,
b0 I
bz *
bz K
b10 +
b10 J
0&
b11101 7
b11101 =
b11101 F
b11111111111111111111111111111110 2
b11111111111111111111111111111110 +"
b1111111111111110 3
b1111111111111110 H
b1111111111111110 *"
b1 (
b1 M
b1 W
b0 )
b0 L
b0 U
b0 6
b0 >
b0 B
b11010000111111111111111000010000 !
b11010000111111111111111000010000 $
b11010000111111111111111000010000 0
b11010000111111111111111000010000 E
b11010000111111111111111000010000 O
b10010 N
b1001100 9
b1001100 P
b1010 Z
b1010 .
b1010 <
b1010 T
b1001000 /
b1001000 Q
1"
#240000
0"
#250000
b100 ?
1^
b10001 :
b10001 R
b10001 Y
b10001 \
b10001 _
b10001 b
b10001 e
b10001 h
b10001 k
b10001 n
b10001 q
b10001 t
b10001 w
b10001 z
b10001 }
b10001 ""
b10001 %"
b10001 ("
b111 8
b111 ;
b10 *
b10 K
1&
b10001 6
b10001 >
b10001 B
b11100 1
b1011 C
b11 D
b1 ,
b1 I
b10 +
b10 J
b11 7
b11 =
b11 F
b1010 .
b1010 <
b1010 T
b0 )
b0 L
b0 U
b111 2
b111 +"
b111 3
b111 H
b111 *"
b10 4
b10 G
b10 S
b0 -
b0 A
b0 V
b111 (
b111 M
b111 W
b111011000000000000011100000010 !
b111011000000000000011100000010 $
b111011000000000000011100000010 0
b111011000000000000011100000010 E
b111011000000000000011100000010 O
b10011 N
b1010000 9
b1010000 P
b1001100 /
b1001100 Q
1"
#260000
0"
#270000
b0 ?
bz :
bz R
bz Y
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
b1101111000 1
bz 8
bz ;
0^
b0 6
b0 >
b0 B
b0 C
b0 D
bz ,
bz I
bz *
bz K
b11 +
b11 J
0&
b0zzzz 7
b0zzzz =
b0zzzz F
b11011110 2
b11011110 +"
b11011110 3
b11011110 H
b11011110 *"
b1101 4
b1101 G
b1101 S
b1010 (
b1010 M
b1010 W
b0 .
b0 <
b0 T
b1101 )
b1101 L
b1101 U
b1101111010101101 !
b1101111010101101 $
b1101111010101101 0
b1101111010101101 E
b1101111010101101 O
b10100 N
b1010000 9
b1010000 P
b10001 `
b1010000 /
b1010000 Q
1"
#280000
0"
#290000
1"
#300000
0"
#310000
1"
